import streamlit as st
import geopandas as gpd
import pandas as pd
import numpy as np
import tempfile
import os
import zipfile
from datetime import datetime
import pydeck as pdk

st.set_page_config(page_title="üå¥ Analizador Palma", layout="wide")
st.title("üå¥ ANALIZADOR PALMA ACEITERA - MAPAS CON POL√çGONOS")
st.markdown("---")

# Configurar para restaurar .shx autom√°ticamente
os.environ['SHAPE_RESTORE_SHX'] = 'YES'

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    nutriente = st.selectbox("Nutriente a Analizar:", ["NITR√ìGENO", "F√ìSFORO", "POTASIO"])
    
    st.subheader("üì§ Subir Datos")
    uploaded_zip = st.file_uploader("Subir archivo ZIP con shapefile", type=['zip'])

# Funci√≥n para calcular superficie en hect√°reas
def calcular_superficie(gdf):
    """Calcula superficie de forma simple y estable"""
    try:
        if gdf.crs and gdf.crs.is_geographic:
            area_m2 = gdf.geometry.area * 10000000000
        else:
            area_m2 = gdf.geometry.area
        return area_m2 / 10000
    except:
        return gdf.geometry.area / 10000

# Funci√≥n para crear mapa con pol√≠gonos usando PyDeck
def crear_mapa_poligonos_pydeck(gdf, nutriente):
    """Crea mapa interactivo con pol√≠gonos completos usando PyDeck"""
    try:
        # Convertir a WGS84 para el mapa
        if gdf.crs is None or str(gdf.crs) != 'EPSG:4326':
            gdf_map = gdf.to_crs('EPSG:4326')
        else:
            gdf_map = gdf.copy()
        
        # Preparar datos para PyDeck
        gdf_map['polygon_id'] = range(len(gdf_map))
        
        # Crear lista de pol√≠gonos para PyDeck
        polygons_data = []
        for idx, row in gdf_map.iterrows():
            # Extraer coordenadas del pol√≠gono
            if hasattr(row.geometry, 'exterior'):
                # Pol√≠gono simple
                coords = [[[x, y] for x, y in row.geometry.exterior.coords]]
            else:
                # MultiPol√≠gono o geometr√≠a compleja
                coords = []
                if hasattr(row.geometry, 'geoms'):
                    for geom in row.geometry.geoms:
                        coords.append([[x, y] for x, y in geom.exterior.coords])
                else:
                    coords = [[[x, y] for x, y in row.geometry.exterior.coords]]
            
            # Definir color seg√∫n categor√≠a
            color_map = {
                "Muy Bajo": [215, 48, 39, 160],    # Rojo
                "Bajo": [252, 141, 89, 160],       # Naranja
                "Medio": [254, 224, 144, 160],     # Amarillo
                "Alto": [224, 243, 248, 160],      # Azul claro
                "Muy Alto": [69, 117, 180, 160]    # Azul oscuro
            }
            
            color = color_map.get(row['categoria'], [51, 136, 255, 160])
            
            polygons_data.append({
                'polygon_id': idx,
                'coordinates': coords,
                'color': color,
                'valor': row['valor'],
                'categoria': row['categoria'],
                'area_ha': row['area_ha'],
                'dosis_npk': row['dosis_npk']
            })
        
        # Capa de pol√≠gonos
        polygon_layer = pdk.Layer(
            'PolygonLayer',
            polygons_data,
            get_polygon='coordinates',
            get_fill_color='color',
            get_line_color=[0, 0, 0, 80],
            get_line_width=2,
            pickable=True,
            auto_highlight=True,
            filled=True,
            extruded=False
        )
        
        # Calcular vista centrada
        centroid = gdf_map.geometry.centroid.unary_union.centroid
        view_state = pdk.ViewState(
            longitude=centroid.x,
            latitude=centroid.y,
            zoom=10,
            pitch=0,
            bearing=0
        )
        
        # Tooltip
        tooltip = {
            "html": """
            <b>Zona {polygon_id}</b><br/>
            <b>Nutriente:</b> """ + nutriente + """<br/>
            <b>Valor:</b> {valor} kg/ha<br/>
            <b>Categor√≠a:</b> {categoria}<br/>
            <b>√Årea:</b> {area_ha:.1f} ha<br/>
            <b>Dosis:</b> {dosis_npk}
            """,
            "style": {
                "backgroundColor": "steelblue",
                "color": "white"
            }
        }
        
        # Crear mapa
        mapa = pdk.Deck(
            layers=[polygon_layer],
            initial_view_state=view_state,
            tooltip=tooltip,
            map_style='light'
        )
        
        return mapa
        
    except Exception as e:
        st.error(f"‚ùå Error creando mapa PyDeck: {str(e)}")
        return None

# Funci√≥n para obtener recomendaciones NPK completas
def obtener_recomendaciones_npk(nutriente, categoria, valor):
    """Devuelve recomendaciones espec√≠ficas de fertilizaci√≥n NPK"""
    
    recomendaciones = {
        "NITR√ìGENO": {
            "Muy Bajo": {
                "fert_actual": "Deficiencia severa de N",
                "dosis_npk": "150-40-120 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Urea (46% N) + Superfosfato triple + Cloruro de potasio",
                "aplicacion": "Dividir en 3 aplicaciones: 40% siembra, 30% 3 meses, 30% 6 meses",
                "observaciones": "Aplicar con azufre para mejorar eficiencia. Monitorear pH del suelo."
            },
            "Bajo": {
                "fert_actual": "Deficiencia de N",
                "dosis_npk": "120-40-100 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)", 
                "fuentes_recomendadas": "Urea + Fosfato diam√≥nico + Sulfato de potasio",
                "aplicacion": "Dividir en 2 aplicaciones: 60% siembra, 40% 4 meses",
                "observaciones": "Incorporar al suelo para reducir p√©rdidas por volatilizaci√≥n"
            },
            "Medio": {
                "fert_actual": "Nivel adecuado de N",
                "dosis_npk": "90-30-80 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Fertilizante complejo 15-15-15 o mezcla similar",
                "aplicacion": "Aplicaci√≥n √∫nica al momento de la siembra",
                "observaciones": "Mantener programa balanceado. Evaluar anualmente."
            },
            "Alto": {
                "fert_actual": "Nivel suficiente de N",
                "dosis_npk": "60-20-60 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)", 
                "fuentes_recomendadas": "Fertilizante complejo 12-12-17 o mezcla baja en N",
                "aplicacion": "Aplicaci√≥n de mantenimiento anual",
                "observaciones": "Reducir dosis para evitar lixiviaci√≥n y contaminaci√≥n"
            },
            "Muy Alto": {
                "fert_actual": "Exceso de N",
                "dosis_npk": "30-20-60 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Solo fertilizantes PK o complejos bajos en N",
                "aplicacion": "Evaluar necesidad real antes de aplicar",
                "observaciones": "Riesgo de lixiviaci√≥n. Priorizar P y K si es necesario."
            }
        },
        "F√ìSFORO": {
            "Muy Bajo": {
                "fert_actual": "Deficiencia cr√≠tica de P",
                "dosis_npk": "120-100-100 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Superfosfato triple (46% P‚ÇÇO‚ÇÖ) + Urea + Cloruro de potasio",
                "aplicacion": "Aplicaci√≥n profunda + mantenimiento superficial",
                "observaciones": "Aplicar en zona radicular. Mezclar bien con el suelo."
            },
            "Bajo": {
                "fert_actual": "Deficiencia de P",
                "dosis_npk": "100-80-90 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)", 
                "fuentes_recomendadas": "Fosfato diam√≥nico (46% P‚ÇÇO‚ÇÖ) + Fuentes de N y K",
                "aplicacion": "Dividir en 2 aplicaciones estrat√©gicas",
                "observaciones": "Aplicar en corona de las palmas para mejor absorci√≥n"
            },
            "Medio": {
                "fert_actual": "Nivel adecuado de P",
                "dosis_npk": "90-60-80 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Fertilizante complejo balanceado 15-15-15",
                "aplicacion": "Aplicaci√≥n anual de mantenimiento", 
                "observaciones": "Mantener niveles. El P es poco m√≥vil en el suelo."
            },
            "Alto": {
                "fert_actual": "Nivel suficiente de P",
                "dosis_npk": "80-40-70 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Fertilizantes con menor contenido de P",
                "aplicacion": "Aplicaci√≥n reducida seg√∫n an√°lisis",
                "observaciones": "F√≥sforo disponible adecuado para la palma"
            },
            "Muy Alto": {
                "fert_actual": "Exceso de P",
                "dosis_npk": "80-20-70 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)", 
                "fuentes_recomendadas": "Solo fuentes de N y K, evitar P adicional",
                "aplicacion": "Suspender aplicaci√≥n de P por 1-2 ciclos",
                "observaciones": "Riesgo de fijaci√≥n y desbalance con micronutrientes"
            }
        },
        "POTASIO": {
            "Muy Bajo": {
                "fert_actual": "Deficiencia severa de K",
                "dosis_npk": "100-40-180 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)", 
                "fuentes_recomendadas": "Cloruro de potasio (60% K‚ÇÇO) + Fuentes de N y P",
                "aplicacion": "Dividir en 3-4 aplicaciones durante el a√±o",
                "observaciones": "Esencial para resistencia a sequ√≠a y enfermedades"
            },
            "Bajo": {
                "fert_actual": "Deficiencia de K",
                "dosis_npk": "90-40-150 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Cloruro de potasio o Sulfato de potasio", 
                "aplicacion": "Dividir en 2-3 aplicaciones estrat√©gicas",
                "observaciones": "Mejorar eficiencia con riego adecuado y cobertura"
            },
            "Medio": {
                "fert_actual": "Nivel adecuado de K",
                "dosis_npk": "80-30-120 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Fertilizante complejo con buen contenido de K",
                "aplicacion": "Mantenimiento anual balanceado",
                "observaciones": "K es m√≥vil, aplicar en corona para mejor absorci√≥n"
            },
            "Alto": {
                "fert_actual": "Nivel suficiente de K", 
                "dosis_npk": "70-30-90 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Fertilizantes complejos est√°ndar",
                "aplicacion": "Aplicaci√≥n de mantenimiento reducida",
                "observaciones": "Mantener balance con Mg y Ca para evitar antagonismos"
            },
            "Muy Alto": {
                "fert_actual": "Exceso de K",
                "dosis_npk": "70-30-60 (N-P‚ÇÇO‚ÇÖ-K‚ÇÇO)",
                "fuentes_recomendadas": "Fuentes de N y P sin K adicional", 
                "aplicacion": "Reducir dr√°sticamente aplicaci√≥n de K",
                "observaciones": "Puede causar deficiencia de Mg. Monitorear balance cati√≥nico."
            }
        }
    }
    
    return recomendaciones[nutriente][categoria]

# Funci√≥n de an√°lisis con mapas de pol√≠gonos
def analizar_shapefile_con_poligonos(gdf, nutriente):
    """Versi√≥n con mapas de pol√≠gonos usando PyDeck"""
    try:
        st.header("üìä Resultados del An√°lisis - Mapas con Pol√≠gonos")
        
        # Calcular √°reas
        areas_ha = calcular_superficie(gdf)
        area_total = areas_ha.sum()
        
        # M√©tricas b√°sicas
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üå± Pol√≠gonos", len(gdf))
        with col2:
            st.metric("üìê √Årea Total", f"{area_total:.1f} ha")
        with col3:
            st.metric("üî¨ Nutriente", nutriente)
        with col4:
            area_promedio = area_total / len(gdf) if len(gdf) > 0 else 0
            st.metric("üìè √Årea Promedio", f"{area_promedio:.1f} ha")
        
        # Simular datos de nutrientes
        np.random.seed(42)
        if nutriente == "NITR√ìGENO":
            valores = np.random.normal(180, 20, len(gdf))
        elif nutriente == "F√ìSFORO":
            valores = np.random.normal(70, 8, len(gdf))
        else:
            valores = np.random.normal(110, 10, len(gdf))
        
        # Crear dataframe de resultados
        gdf_analizado = gdf.copy()
        gdf_analizado['area_ha'] = areas_ha
        gdf_analizado['valor'] = np.maximum(valores, 0).round(1)
        
        # Categorizar
        def categorizar(valor, nutriente):
            if nutriente == "NITR√ìGENO":
                if valor < 160: return "Muy Bajo"
                elif valor < 180: return "Bajo" 
                elif valor < 200: return "Medio"
                elif valor < 210: return "Alto"
                else: return "Muy Alto"
            elif nutriente == "F√ìSFORO":
                if valor < 60: return "Muy Bajo"
                elif valor < 68: return "Bajo"
                elif valor < 75: return "Medio" 
                elif valor < 78: return "Alto"
                else: return "Muy Alto"
            else:
                if valor < 100: return "Muy Bajo"
                elif valor < 108: return "Bajo"
                elif valor < 115: return "Medio"
                elif valor < 118: return "Alto"
                else: return "Muy Alto"
        
        gdf_analizado['categoria'] = [categorizar(v, nutriente) for v in gdf_analizado['valor']]
        
        # A√±adir recomendaciones NPK completas
        for idx, row in gdf_analizado.iterrows():
            rec = obtener_recomendaciones_npk(nutriente, row['categoria'], row['valor'])
            gdf_analizado.loc[idx, 'fert_actual'] = rec['fert_actual']
            gdf_analizado.loc[idx, 'dosis_npk'] = rec['dosis_npk']
            gdf_analizado.loc[idx, 'fuentes_recomendadas'] = rec['fuentes_recomendadas']
            gdf_analizado.loc[idx, 'aplicacion'] = rec['aplicacion']
            gdf_analizado.loc[idx, 'observaciones'] = rec['observaciones']
        
        # MAPA CON POL√çGONOS COMPLETOS (PyDeck)
        st.subheader("üó∫Ô∏è Mapa de Pol√≠gonos - Distribuci√≥n de " + nutriente)
        st.info("üí° **Pasa el mouse sobre los pol√≠gonos para ver detalles**")
        
        mapa = crear_mapa_poligonos_pydeck(gdf_analizado, nutriente)
        if mapa:
            st.pydeck_chart(mapa)
        else:
            st.warning("‚ö†Ô∏è El mapa avanzado no est√° disponible. Mostrando vista b√°sica...")
            # Fallback a mapa simple
            try:
                gdf_map = gdf_analizado.to_crs('EPSG:4326')
                gdf_map['lon'] = gdf_map.geometry.centroid.x
                gdf_map['lat'] = gdf_map.geometry.centroid.y
                st.map(gdf_map[['lat', 'lon', 'valor']].rename(columns={'valor': 'size'}))
            except:
                st.error("No se pudo generar el mapa")
        
        # LEYENDA DE COLORES
        st.subheader("üé® Leyenda de Colores")
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            st.markdown('<div style="background-color: #d73027; padding: 10px; color: white; text-align: center; border-radius: 5px;">Muy Bajo</div>', unsafe_allow_html=True)
        with col2:
            st.markdown('<div style="background-color: #fc8d59; padding: 10px; color: black; text-align: center; border-radius: 5px;">Bajo</div>', unsafe_allow_html=True)
        with col3:
            st.markdown('<div style="background-color: #fee090; padding: 10px; color: black; text-align: center; border-radius: 5px;">Medio</div>', unsafe_allow_html=True)
        with col4:
            st.markdown('<div style="background-color: #e0f3f8; padding: 10px; color: black; text-align: center; border-radius: 5px;">Alto</div>', unsafe_allow_html=True)
        with col5:
            st.markdown('<div style="background-color: #4575b4; padding: 10px; color: white; text-align: center; border-radius: 5px;">Muy Alto</div>', unsafe_allow_html=True)
        
        # Resto del an√°lisis (estad√≠sticas, recomendaciones, etc.) permanece igual...
        # ... [el resto del c√≥digo igual que antes]

# Procesar archivo
if uploaded_zip:
    if st.button("üöÄ Ejecutar An√°lisis con Mapas", type="primary"):
        with st.spinner("Analizando shapefile y generando mapas..."):
            try:
                with tempfile.TemporaryDirectory() as tmp_dir:
                    # Extraer ZIP
                    with zipfile.ZipFile(uploaded_zip, 'r') as zip_ref:
                        zip_ref.extractall(tmp_dir)
                    
                    # Buscar .shp
                    shp_files = [f for f in os.listdir(tmp_dir) if f.endswith('.shp')]
                    if not shp_files:
                        st.error("No se encontr√≥ archivo .shp")
                        st.stop()
                    
                    shp_path = os.path.join(tmp_dir, shp_files[0])
                    gdf = gpd.read_file(shp_path)
                    st.success(f"‚úÖ Shapefile cargado: {len(gdf)} pol√≠gonos")
                    
                    # Ejecutar an√°lisis con mapas
                    analizar_shapefile_con_poligonos(gdf, nutriente)
                    
            except Exception as e:
                st.error(f"Error procesando archivo: {str(e)}")

else:
    st.info("üìÅ Sube un archivo ZIP con tu shapefile para comenzar el an√°lisis")
